[
  {
    "id": "1745482596072",
    "content": "https://tingsongyu.github.io/PyTorch-Tutorial-2nd/chapter-1/1.2-Anaconda.html\n\n解释器--python.exe。   \npython.exe读取.py文件，解释成二进制文件，让CPU读懂，并运行。这就是解释器的作用，更直观的例子，python3的解释器是无法翻译python2语法的语句print \"Hello World\"的，因此不同的python.exe其实就对应了不同的环境。\n\nAnaconda是为方便使用Python而建立的一个软件包，包含常用的250多个工具包，多版本Python解释器和强大的虚拟环境管理工具，所以Anaconda被称为Python全家桶。\n\nanaconda常用命令  \n创建环境：conda create -n your_env_name python=X.X （X.X为python版本）  \neg: conda create -n pytorch_tutorial python=3.7  \n激活环境：source activate your_env_name  \neg: source activate pytorch_tutorial  \n退出环境：source deactivate  \n删除环境：conda remove -n your_env_name –all  \neg: conda remove -n pytorch_tutorial --all  \n查看已有虚拟环境：conda env list / conda info -e",
    "timestamp": "2025-04-24T08:16:36.072Z"
  },
  {
    "id": "1744375763840",
    "content": "![image.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-11/1744375340128.png?raw=true)  \n\n服务1到N：它们代表不同的服务，通过通知服务器提供的API发送通知。  \n通知服务器: 它们提供以下功能：\n- 为服务提供发送通知的API。这些API只能由内部或经过验证的客户访问，以防止垃圾邮件。   \n\n- 进行基本验证，以核实电子邮件、电话号码等。  \n- 查询数据库或缓存以获取渲染通知所需的数据。  \n- 将通知数据放到消息队列中进行并行处理。  \n- 下面是一个发送电子邮件的API的例子：  \nPOST https://api.example.com/v/sms/send  \nRequest body：\n![image.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-11/1744375586834.png?raw=true)  \n- 缓存：用户信息、设备信息、通知模板都被缓存了。  \n- 数据库：它存储了关于用户、通知、设置等方面的数据。  \n- 消息队列：它们消除了组件之间的依赖性。当大量的通知被发送出去时，消息队列可以作为缓冲区。每种通知类型都被分配了一个不同的消息队列，所以一个第三方服务的中断不会影响其他通知类型。  \n- Workers：Workers 是一组服务器，它们从消息队列中拉取通知事件并将它们发送到相应的第三方服务。  \n- 第三方服务：在最初的设计中已经解释过。  \n- iOS, Android, SMS, Email：在最初的设计中已经说明。\n\n接下来，让我们来看看每个组件是如何一起工作来发送通知的。  \n1.一个服务调用通知服务器提供的API来发送通知  \n2.通知服务器从缓存或数据库中获取元数据，如用户信息、设备令牌和通知设置。  \n3.一个通知事件被发送到相应的队列进行处理。例如，一个iOS推送通知事件被发送到iOS PN队列中。  \n4.工作者从消息队列中获取通知事件。  \n5.工作者向第三方服务发送通知。  \n6.第三方服务向用户设备发送通知。",
    "timestamp": "2025-04-11T12:49:23.840Z"
  },
  {
    "id": "1744291700172",
    "content": "![image.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-10/1744275454533.png?raw=true)\n\n第 1 步：将种子 URL 添加到 URL Frontier    \n第 2 步：HTML 下载器从 URL Frontier 获取 URL 列表。  \n第 3 步：HTML 下载器从 DNS 解析器获取 URL 的 IP 地址并开始下载。  \n第 4 步：Content Parser 解析 HTML 页面并检查页面是否格式错误。  \n第 5 步：内容经过解析和验证后，传递给“Content Seen?”组件。  \n第 6 步：“Content Seen”组件检查 HTML 页面是否已在存储中。  \n- 如果在存储中，这意味着不同URL 中的相同内容已经被处理过。在这种情况下，HTML 页面将被丢弃。  \n- 如果不在存储中，则系统之前没有处理过相同的内容。内容被传递给链接提取器。  \n\n第 7 步：网址提取器从 HTML 页面中提取网址。  \n第 8 步：将提取的网址传递给 URL 过滤器。  \n第 9 步：网址过滤后，传递给“URL Seen?”组件。  \n第 10 步：“URL Seen”组件检查一个URL是否已经在存储中，如果是，则之前处理过，不需要做任何事情。  \n第 11 步：如果一个 URL 以前没有被处理过，它被添加到 URL Frontier。",
    "timestamp": "2025-04-10T13:28:20.172Z"
  },
  {
    "id": "1744216548370",
    "content": "> 301重定向。  \n301重定向表明，请求的URL被 \"永久 \"地移到了长URL上。由于是永久重定向，浏览器会缓存响应，对同一URL的后续请求将不会被发送到URL缩短服务上。相反，请求将直接被重定向到长网址服务器。  \n302重定向。  \n302重定向意味着URL被 \"暂时 \"移到长URL上，这意味着对同一URL的后续请求将首先被发送到URL缩短服务上。然后，它们会被重定向到长网址服务器。  \n如果优先考虑减少服务器负载，使用301重定向是有意义的，因为只有同一URL的第一个请求被发送到URL缩短服务器。然而，如果分析是重要的，302重定向是一个更好的选择，因为它可以更容易地跟踪点击率和点击的来源。\n\n![image.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-09/1744216331525.png?raw=true)  \n\n1.longURL 是输入的  \n2.系统检查 longURL 是否存在于数据库中  \n3.如果是的话，这意味着longURL之前被转换为shortURL。在这种情况下，从数据库中获取shortURL并将其返回给客户端。  \n4.如果不是，longURL是新的。一个新的唯一ID（主键）由唯一ID生成器生成。  \n5.使用base 62转换将ID转换为shortURL。  \n6.用ID、shortURL和longURL创建一个新的数据库记录。\n\n为了使流程更容易理解，让我们看一个具体的例子。  \n1.假设输入的longURL是：https://en.wikipedia.org/wiki/Systems_design  \n2.唯一ID生成器返回ID：2009215674938  \n3.使用62进制转换将ID转换为shortURL。ID（2009215674938）被转换为 \"zn9edcu\"。  \n4.将ID、shortURL和longURL保存到数据库。\n\n\n---https://learning-guide.gitbook.io/ ",
    "timestamp": "2025-04-09T16:35:48.370Z"
  },
  {
    "id": "1744214134863",
    "content": "一些markdown语法\n\n* **段落**：直接输入文字，段落间空一行。\n* **换行**：行尾添加两个空格或空一行。\n\n段内换行是shift+回车键，而换段落是回车键\n\n\n\n-+空格 = 无序列表\n\n- 无序列表\n\t- 子项\n\n> ‘>’一级引用 多行需每行加 `>`\n\n> > ‘>’二级引用\n\n\n\n`反引号` ``\n\n用三个反引号 ````` 包裹，并指定语言（可选）：\n\n```python\ndef hello():\n    print(\"Hello Markdown!\")\n```\n\n用 `- [ ]` 或 `- [x]` 标记未完成/已完成任务：\n\n```markdown\n- [x] 写大纲\n- [ ] 写正文\n```\n\n- [x] 写大纲\n- [ ] 写正文\n\n![替代文本](图片URL \"标题（可选）\")\n\n![熊猫](https://example.com/panda.jpg \"可爱的熊猫\")\n\n![Logo][logo] [logo]: /assets/logo.png \"公司Logo\"\n\nMarkdown允许直接插入HTML标签，用于精细控制样式：\n\n```markdown\n这是<span style=\"color:red\">红色文字</span>。\n<u>下划线</u>或<small>小号字</small>。\n```\n\n<span style=\"color:red\">红色文字</span>\n\n<u>下划线</u>或<small>小号字</small>\n\n\n\n#### 自动生成目录**（部分**工!具!**支持）\n\n使用 `[TOC]` 或特定标记（如Typora）：\n\n```markdown\n## 目录\n[TOC]\n\n## 第一章...\n```\n\n````\n```diff\n- 删除的行\n+ 新增的行\n```\n````\n\n1. 用HTML标签为文字添加绿色背景（`<span style=\"background:lightgreen\">`）\n\n\n\n<span style=\"background:lightgreen\">绿色背景</span>\n\n",
    "timestamp": "2025-04-09T15:55:34.863Z"
  },
  {
    "id": "1743648970583",
    "content": "一致性哈希\n\n\n![1743648611337.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-03/1743648899402.png?raw=true)\n\n\n一致性哈希的好处包括：\n\n1.当服务器被添加或删除时，很小一部分的键被重新分配。\n\n2.容易水平扩展，因为数据分布更加均匀。\n\n3.缓解热点健问题。 \n\n4.对特定分片的过度访问可能会导致服务器过载。 想象一下 Katy Perry、Justin Bieber 和 Lady Gaga 的数据最终都在同一个分片上。 一致性哈希通过更均匀地分配数据来缓解这个问题。\n\n一致性哈希广泛用于现实世界的系统，包括一些著名的系统：\n\n亚马逊 Dynamo 数据库的分区组件\n\nApache Cassandra 中跨集群的数据分区\n\nDiscord 聊天应用\n\nAkamai 内容分发网络\n\nMaglev 网络负载均衡器",
    "timestamp": "2025-04-03T02:56:10.583Z"
  },
  {
    "id": "1743573105085",
    "content": "示例：估算Twitter的查询量和存储需求\n\n请注意，以下数字仅用于本练习，不是 Twitter 的真实数据。\n\n假设：\n\n每月活跃用户为3亿。\n\n50%的用户每天使用 Twitter。\n\n用户平均每天发布2条推文。\n\n10%的推文包含媒体。\n\n数据存储时间为5年。\n\n估算： 查询每秒次数（QPS）估计：\n\n每日活跃用户（DAU）= 3亿 * 50% = 1.5亿\n\n推文 QPS = 1.5亿 * 2推文 / 24小时 / 3600秒 = 约 3500\n\n峰值QPS = 2 * QPS = 约 7000\n\n(译者注：这里更准确地说应该估算的 TPS，而不是QPS。仅个人观点，原文翻译还是保持原作者意思为 QPS。)\n\n我们这里只会估算媒体存储。\n\n平均推文大小：\n\n推文ID 64 bytes（字节）\n\n文本 140 bytes（字节）\n\n媒体 1MB\n\n媒体存储：1.5亿 * 2 * 10% * 1MB = 每天30TB\n\n5年媒体存储：30TB * 365 * 5 = 约 55PB\n\n---\n小贴士\n\n粗略估计更注重过程而非结果。 解决问题比得到准确结果更为重要。 面试官可能会测试你的解决问题的能力。 以下是一些建议：\n\n四舍五入和近似值。在面试中进行复杂的数学运算是困难的。例如，“99987 / 9.1”的结果是多少？没有必要花费宝贵的时间来解决复杂的数学问题。精确度并不是必需的。使用整数和近似值来简化问题。例如，“100,000 / 10”。\n\n记下你的假设。写下你的假设是个好主意，以便以后参考。\n\n标记你的单位。当你写下“5”时，它是指5 KB还是5 MB？这可能会让你感到困惑。写下单位，因为“5 MB”有助于消除歧义。\n\n常见的粗略估计问题包括：QPS、峰值QPS、存储、缓存、服务器数量等。",
    "timestamp": "2025-04-02T05:51:45.085Z"
  },
  {
    "id": "1743572287809",
    "content": "![1743572175390.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-02/1743572182329.png?raw=true)",
    "timestamp": "2025-04-02T05:38:07.809Z"
  },
  {
    "id": "1743571905875",
    "content": "CDN工作流程：\n![image.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-02/1743571754022.png?raw=true)\n\n\n1.用户A尝试通过图片URL获取image.png。这个URL的域名是由CDN提供商提供，以下两个图像URL是用于演示URL在Amazon和Akamai CDN上的示例：\nhttps://mysite.cloudfront.net/logo.jpg\n\nhttps://mysite.akamai.com/image-manager/img/logo.jpg\n\n2.如果CDN服务器缓存中没有这个图片image.png，CDN服务器会从源（可以是Web服务器或在线存储，如Amazon S3）请求文件。\n\n3.源返回image.png给CDN服务器，并包含可选的HTTP头部Time-to-Live（TTL），它表示图像被缓存的时间有多长。\n\n4.CDN缓存图像并将其返回给用户A。在TTL过期之前，图像一直被缓存在CDN中。\n\n5.用户B发送一个请求获取相同的图片\n\n6.只要TTL尚未过期，图像就会从缓存中返回。",
    "timestamp": "2025-04-02T05:31:45.875Z"
  },
  {
    "id": "1743569513929",
    "content": "一个系统设计：\n![1743569379918.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-02/1743569389933.png?raw=true)\n\n\n1.用户从DNS获取负载均衡器的IP地址\n\n2.用户使用这个IP地址连接到负载均衡器\n\n3.HTTP请求被路由到Server 1或Server 2。\n\n4.Web服务器从从数据库读取用户数据\n\n5.Web服务器将任何修改数据的操作路由到主数据库，这包括写入，更新和删除操作。",
    "timestamp": "2025-04-02T04:51:53.929Z"
  },
  {
    "id": "1743569220672",
    "content": "负载均衡：\n![1743568960512.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-02/1743569010101.png?raw=true)\n用户直接连接负载均衡的公网IP。通过此配置，客户端不再直接访问web服务器，为了提高安全性，服务器之间的通信使用私有IP。私有IP是仅在同一网络中的服务器之间可达的IP地址。然而，它在互联网上是不可访问的。负载均衡器通过私有IP与Web服务器通信。\n\n\n\n.1如果服务器1下线，所有流量将被路由到服务器2。这可以防止网站离线，我们还将在服务器池中添加一个新的健康Web服务器来平衡负载。\n\n.2如果网站流量迅速增长，并且两台服务器不足以处理流量，那么负载均衡可以很好的处理这个问题，你只需要向web服务器池中添加更多的服务器，负载均衡会自动发送请求给他们。",
    "timestamp": "2025-04-02T04:47:00.672Z"
  },
  {
    "id": "1743568575436",
    "content": "单服务器：\n![1743566066896.png](https://github.com/YCChan2001/tinymind-blog/blob/main/assets/images/2025-04-02/1743566138644.png?raw=true)\n1.用户通过域名访问网站，例如api.mysite.com。通常，域名系统（DNS）是由第三方提供的付费服务，而不是由我们的服务器托管。\n\n2.Internet Protocol（IP）地址被返回给浏览器或移动应用程序。在这个例子中，返回的IP地址是15.125.23.214。\n\n3.一旦获得了IP地址，就会直接向您的Web服务器发送超文本传输协议（HTTP）[1]请求。\n\n4.Web服务器返回用于渲染的HTML页面或JSON响应。",
    "timestamp": "2025-04-02T04:36:15.436Z"
  }
]